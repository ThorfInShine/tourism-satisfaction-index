name: Deploy Batu Tourism Analytics

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üöÄ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üîß Install Dependencies
      run: |
        echo "Installing dependencies..."
        npm ci --prefer-offline --no-audit
        echo "Dependencies installed successfully"
        
    - name: üèóÔ∏è Build React Application
      run: |
        echo "Building React application..."
        npm run build
        
        # Verify build
        if [ ! -d "build" ] || [ ! -f "build/index.html" ]; then
          echo "‚ùå Build failed"
          exit 1
        fi
        
        echo "‚úÖ Build completed successfully"
        echo "Build contents:"
        ls -la build/
        echo "Total files: $(find build/ -type f | wc -l)"
      env:
        CI: false
        REACT_APP_API_URL: https://apibatas.bpskotabatu.com/api
        REACT_APP_ENV: production
        REACT_APP_DOMAIN: batas.bpskotabatu.com
        GENERATE_SOURCEMAP: false
        
    - name: üß™ Test SSH Connection
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        timeout: 30s
        script: |
          echo "‚úÖ SSH connection successful"
          echo "Server: $(hostname)"
          echo "User: $(whoami)"
          echo "Date: $(date)"
          
    - name: üöÄ Deploy Files to Server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        source: "build/*"
        target: "/tmp/batu-tourism-deploy/"
        timeout: 300s
        overwrite: true
        rm: true
        
    - name: üîÑ Move Files and Configure
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        timeout: 300s
        script: |
          set -e
          
          echo "üöÄ Starting deployment process..."
          
          # Variables
          DEPLOY_DIR="/var/www/html/batas.bpskotabatu.com"
          BACKUP_DIR="/var/backups/batas.bpskotabatu.com"
          TEMP_DIR="/tmp/batu-tourism-deploy"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # Create directories
          sudo mkdir -p $DEPLOY_DIR
          sudo mkdir -p $BACKUP_DIR
          
          # Check if temp files exist
          if [ ! -d "$TEMP_DIR" ]; then
            echo "‚ùå Temporary deployment files not found at $TEMP_DIR"
            echo "Contents of /tmp:"
            ls -la /tmp/ | grep -i batu || echo "No batu-related files found"
            exit 1
          fi
          
          echo "üìÅ Temporary files found:"
          ls -la $TEMP_DIR/
          
          # Backup current deployment
          if [ -d "$DEPLOY_DIR" ] && [ "$(ls -A $DEPLOY_DIR 2>/dev/null)" ]; then
            echo "üì¶ Creating backup..."
            sudo tar -czf $BACKUP_DIR/backup_${TIMESTAMP}.tar.gz -C $DEPLOY_DIR . || true
            echo "‚úÖ Backup created: backup_${TIMESTAMP}.tar.gz"
            
            # Keep only last 5 backups
            sudo find $BACKUP_DIR -name "backup_*.tar.gz" -type f -printf '%T@ %p\n' | sort -n | head -n -5 | cut -d' ' -f2- | sudo xargs rm -f 2>/dev/null || true
          fi
          
          # Clear deployment directory
          echo "üßπ Clearing deployment directory..."
          sudo rm -rf $DEPLOY_DIR/*
          
          # Move files from temp to deployment directory
          echo "üì¶ Moving files to deployment directory..."
          sudo cp -r $TEMP_DIR/* $DEPLOY_DIR/
          
          # Verify critical files
          if [ ! -f "$DEPLOY_DIR/index.html" ]; then
            echo "‚ùå Critical file missing: index.html"
            echo "Files in deployment directory:"
            ls -la $DEPLOY_DIR/
            exit 1
          fi
          
          # Set permissions
          echo "üîê Setting permissions..."
          sudo chown -R www-data:www-data $DEPLOY_DIR
          sudo chmod -R 755 $DEPLOY_DIR
          sudo find $DEPLOY_DIR -type f -exec chmod 644 {} \;
          
          # Set specific permissions for important files
          sudo chmod 644 $DEPLOY_DIR/index.html 2>/dev/null || true
          sudo chmod 644 $DEPLOY_DIR/manifest.json 2>/dev/null || true
          sudo chmod 644 $DEPLOY_DIR/robots.txt 2>/dev/null || true
          
          echo "üìä Deployment statistics:"
          echo "   - Files deployed: $(find $DEPLOY_DIR -type f | wc -l)"
          echo "   - Total size: $(du -sh $DEPLOY_DIR | cut -f1)"
          echo "   - Main files:"
          find $DEPLOY_DIR -maxdepth 1 -type f -name "*.html" -o -name "*.json" -o -name "*.txt" | head -5
          
          # Test nginx configuration
          echo "üîß Testing nginx configuration..."
          sudo nginx -t
          if [ $? -ne 0 ]; then
            echo "‚ùå Nginx configuration test failed"
            
            # Restore from backup if available
            LATEST_BACKUP=$(sudo find $BACKUP_DIR -name "backup_*.tar.gz" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2- 2>/dev/null)
            if [ -n "$LATEST_BACKUP" ] && [ -f "$LATEST_BACKUP" ]; then
              echo "üîÑ Restoring from backup: $LATEST_BACKUP"
              sudo rm -rf $DEPLOY_DIR/*
              sudo tar -xzf $LATEST_BACKUP -C $DEPLOY_DIR/
              sudo chown -R www-data:www-data $DEPLOY_DIR
              echo "‚úÖ Backup restored"
            fi
            
            exit 1
          fi
          
          # Reload nginx
          echo "üîÑ Reloading nginx..."
          sudo systemctl reload nginx
          
          # Wait and check nginx status
          sleep 2
          if ! sudo systemctl is-active --quiet nginx; then
            echo "‚ùå Nginx is not running properly"
            sudo systemctl status nginx --no-pager -l
            exit 1
          fi
          
          # Cleanup temporary files
          echo "üßπ Cleaning up temporary files..."
          rm -rf $TEMP_DIR
          
          # Final verification
          echo "üîç Final verification..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost -H "Host: batas.bpskotabatu.com" 2>/dev/null || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Website is available at: http://batas.bpskotabatu.com"
            echo "üìÖ Deployment time: $(date)"
          else
            echo "‚ö†Ô∏è Deployment completed but website returned HTTP $HTTP_STATUS"
            echo "üîç Checking nginx error logs:"
            sudo tail -5 /var/log/nginx/error.log 2>/dev/null || echo "No error logs available"
          fi
          
          echo "üéâ Deployment process completed!"
          
    - name: üß™ Final Website Test
      run: |
        echo "üß™ Testing deployed website from external..."
        sleep 15
        
        # Test HTTP response
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://batas.bpskotabatu.com 2>/dev/null || echo "000")
        echo "HTTP Status: $HTTP_STATUS"
        
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "‚úÖ Website is accessible from external"
          
          # Test content
          CONTENT=$(curl -s http://batas.bpskotabatu.com 2>/dev/null | head -10)
          if echo "$CONTENT" | grep -q "<!DOCTYPE html>" ; then
            echo "‚úÖ HTML content verified"
            
            # Check for React app indicators
            if echo "$CONTENT" | grep -qi "react\|tourism\|analytics\|batu" ; then
              echo "‚úÖ React app content detected"
            else
              echo "‚ö†Ô∏è React app content not clearly detected"
            fi
          else
            echo "‚ö†Ô∏è HTML content verification failed"
            echo "Response preview:"
            echo "$CONTENT"
          fi
        else
          echo "‚ùå Website test failed with status: $HTTP_STATUS"
          echo "This might be a temporary issue. Please check manually: http://batas.bpskotabatu.com"
        fi
        
        # Test HTTPS (if available)
        HTTPS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://batas.bpskotabatu.com 2>/dev/null || echo "000")
        if [ "$HTTPS_STATUS" = "200" ]; then
          echo "‚úÖ HTTPS is also working: https://batas.bpskotabatu.com"
        else
          echo "‚ÑπÔ∏è HTTPS Status: $HTTPS_STATUS (may not be configured yet)"
        fi
        
        echo "üéâ Deployment testing completed!"