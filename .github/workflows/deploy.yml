name: Deploy Batu Tourism Analytics

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üöÄ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üîß Install Dependencies
      run: |
        echo "Installing dependencies..."
        npm ci --prefer-offline --no-audit
        echo "Dependencies installed successfully"
        
    - name: üèóÔ∏è Build React Application
      run: |
        echo "Building React application..."
        npm run build
        
        # Verify build
        if [ ! -d "build" ] || [ ! -f "build/index.html" ]; then
          echo "‚ùå Build failed"
          exit 1
        fi
        
        echo "‚úÖ Build completed successfully"
        echo "Build contents:"
        ls -la build/
        echo "Build size: $(du -sh build/)"
      env:
        CI: false
        REACT_APP_API_URL: https://apibatas.bpskotabatu.com/api
        REACT_APP_ENV: production
        REACT_APP_DOMAIN: batas.bpskotabatu.com
        GENERATE_SOURCEMAP: false
        
    - name: üóúÔ∏è Create Deployment Package
      run: |
        echo "Creating deployment package..."
        cd build
        tar -czf ../deploy.tar.gz *
        cd ..
        
        echo "Package info:"
        ls -lh deploy.tar.gz
        echo "Package contents (first 20 files):"
        tar -tzf deploy.tar.gz | head -20
        
        # Verify package is not empty
        if [ ! -s deploy.tar.gz ]; then
          echo "‚ùå Package is empty!"
          exit 1
        fi
        
        echo "‚úÖ Package created successfully"
        
    - name: üß™ Test SSH Connection
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        timeout: 30s
        script: |
          echo "‚úÖ SSH connection successful"
          echo "Server: $(hostname)"
          echo "User: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Temp directory contents:"
          ls -la /tmp/ | grep -E "(deploy|batu)" || echo "No deploy files found"
          
    - name: üöÄ Upload Deployment Package
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        source: "deploy.tar.gz"
        target: "/tmp/"
        timeout: 300s
        overwrite: true
        debug: true
        
    - name: üîç Verify Upload
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        timeout: 30s
        script: |
          echo "Checking uploaded file..."
          if [ -f "/tmp/deploy.tar.gz" ]; then
            echo "‚úÖ File found: /tmp/deploy.tar.gz"
            echo "File size: $(ls -lh /tmp/deploy.tar.gz)"
            echo "File contents preview:"
            tar -tzf /tmp/deploy.tar.gz | head -10
          else
            echo "‚ùå File not found: /tmp/deploy.tar.gz"
            echo "Files in /tmp:"
            ls -la /tmp/ | grep -E "(deploy|batu|tar\.gz)" || echo "No relevant files found"
            exit 1
          fi
          
    - name: üîÑ Deploy to Website Directory
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        timeout: 300s
        script: |
          set -e
          
          echo "üöÄ Starting deployment process..."
          
          # Variables
          DEPLOY_DIR="/var/www/html/batas.bpskotabatu.com"
          BACKUP_DIR="/var/backups/batas.bpskotabatu.com"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # Create directories
          sudo mkdir -p $DEPLOY_DIR
          sudo mkdir -p $BACKUP_DIR
          
          # Backup current deployment
          if [ -d "$DEPLOY_DIR" ] && [ "$(ls -A $DEPLOY_DIR 2>/dev/null)" ]; then
            echo "üì¶ Creating backup..."
            sudo tar -czf $BACKUP_DIR/backup_${TIMESTAMP}.tar.gz -C $DEPLOY_DIR . || true
            echo "‚úÖ Backup created: backup_${TIMESTAMP}.tar.gz"
          fi
          
          # Clear deployment directory
          echo "üßπ Clearing deployment directory..."
          sudo rm -rf $DEPLOY_DIR/*
          
          # Verify deployment package exists
          if [ ! -f "/tmp/deploy.tar.gz" ]; then
            echo "‚ùå Deployment package not found in /tmp/deploy.tar.gz"
            echo "Available files in /tmp:"
            ls -la /tmp/
            exit 1
          fi
          
          # Extract new files
          echo "üì¶ Extracting deployment package..."
          sudo tar -xzf /tmp/deploy.tar.gz -C $DEPLOY_DIR/
          echo "‚úÖ Files extracted successfully"
          
          # Set permissions
          echo "üîê Setting permissions..."
          sudo chown -R www-data:www-data $DEPLOY_DIR
          sudo chmod -R 755 $DEPLOY_DIR
          sudo find $DEPLOY_DIR -type f -exec chmod 644 {} \;
          
          # Verify deployment
          echo "üîç Verifying deployment..."
          if [ -f "$DEPLOY_DIR/index.html" ]; then
            echo "‚úÖ index.html found"
            echo "Deployed files count: $(find $DEPLOY_DIR -type f | wc -l)"
            echo "Deployment size: $(du -sh $DEPLOY_DIR)"
          else
            echo "‚ùå index.html not found!"
            echo "Files in deployment directory:"
            ls -la $DEPLOY_DIR/
            exit 1
          fi
          
          # Test nginx config
          echo "üîß Testing nginx configuration..."
          sudo nginx -t
          
          # Reload nginx
          echo "üîÑ Reloading nginx..."
          sudo systemctl reload nginx
          
          # Cleanup
          rm -f /tmp/deploy.tar.gz
          
          # Final test
          echo "üß™ Testing website..."
          sleep 3
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost -H "Host: batas.bpskotabatu.com" || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Website: http://batas.bpskotabatu.com"
          else
            echo "‚ö†Ô∏è Website returned status: $HTTP_STATUS"
          fi
          
    - name: üß™ Final Website Test
      run: |
        echo "üß™ Testing deployed website..."
        sleep 10
        
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://batas.bpskotabatu.com || echo "000")
        echo "HTTP Status: $HTTP_STATUS"
        
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "‚úÖ Website is accessible"
          
          # Test content
          CONTENT=$(curl -s http://batas.bpskotabatu.com | head -10)
          if echo "$CONTENT" | grep -q "<!DOCTYPE html>" ; then
            echo "‚úÖ HTML content verified"
          else
            echo "‚ö†Ô∏è HTML content verification failed"
          fi
        else
          echo "‚ùå Website test failed with status: $HTTP_STATUS"
        fi